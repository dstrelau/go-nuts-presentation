Go? Nuts!

# * Dough...nuts
# .image donuts.gif



* Golang

- compiled
- static typing
- garbage collected
- pointers
- composition not inheritance
- no generics
- no exceptions
- concurrency as default
- coroutines/channels


* Using Go

- DigitalOcean
- Docker
- Hashicorp
- InfluxDB
- Shopify
- SoundCloud
- Stack Exchange
- Twitter
- Uber

[[https://github.com/golang/go/wiki/GoUsers]]

* Hello, World

.play -edit hello.go

  $ go run hello.go
  Hello, Trunk Club

  $ go build -o hello hello.go

  $ file hello
  hello: Mach-O 64-bit executable x86_64

  $ ./hello
  Hello, Trunk Club

* Basics

.play -edit basics.go /^import/,

* Pointers

.play -edit pointers.go /^func/,

* Slices

.play -edit slice.go /^func/,

* for

.play -edit for.go /^func/,

* Types & Interfaces

* Shapes

.code shapes.go /^type/,/END TYPES/
.code shapes.go /^type shape/,/^}/

* Shapes

.play -edit shapes.go /^func main/,/^}/

* JSON

* JSON

.code json.go /var theFruit/,/^}/
.code json.go /^type/,/^}/

* JSON

.play -edit json.go /^func main/,

* sort

  func Sort(data Interface)

  type Interface interface {
      // Len is the number of elements in the collection.
      Len() int
      // Less reports whether the element with
      // index i should sort before the element with index j.
      Less(i, j int) bool
      // Swap swaps the elements with indexes i and j.
      Swap(i, j int)
  }

-

  type ByAge []Person

  func (a ByAge) Len() int           { return len(a) }
  func (a ByAge) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
  func (a ByAge) Less(i, j int) bool { return a[i].Age < a[j].Age }

  sort.Sort(ByAge(persons))

* io

  type Reader interface {
      Read(p []byte) (n int, err error)
  }

  type Writer interface {
      Write(p []byte) (n int, err error)
  }

  func WriteString(w Writer, s string) (n int, err error)
  func ReadFull(r Reader, buf []byte) (n int, err error)
  func Copy(dst Writer, src Reader) (written int64, err error)
  func TeeReader(r Reader, w Writer) Reader

* Concurrency (is not parallelism)

* Channels

.play -edit channels.go

* Goroutines

.play -edit goroutines.go /^func/,

* time

  type Ticker struct {
    C <-chan Time // The channel on which the ticks are delivered.
  }

.play -edit ticker.go /^func/,

* select

.code select.go /^func fill/,/^}/

* select

.play -edit select.go /^func main/,

* Why Go?

* Less is More
- Small (syntax & concepts)
- Explicit > Terse
- v1 frozen
- Can't be lazy

* Great stdlib

- flags
- io & bufio
- encoding/json
- unicode/utf8
- net/http (HTTP/2)
- testing & testing/quick
- image/gif

* Great Tools

- go fmt
- go vet
- go get
- go test -race
- present

* Orthogonal to Ruby

- Statically Typed
- Compiled
- Concurrency
